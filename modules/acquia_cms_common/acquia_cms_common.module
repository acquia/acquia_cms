<?php

/**
 * @file
 * Contains hook implementations for common, shared Acquia CMS functionality.
 */

use Drupal\acquia_cms_common\Facade\MetatagFacade;
use Drupal\acquia_cms_common\Facade\SitemapFacade;
use Drupal\acquia_cms_common\Facade\WorkbenchEmailFacade;
use Drupal\acquia_cms_common\Facade\WorkflowFacade;
use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Installer\InstallerKernel;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\imce\Imce;
use Drupal\node\NodeTypeInterface;
use Drupal\workbench_email\TemplateInterface;
use Symfony\Component\Yaml\Yaml;

/**
 * Implements hook_preinstall().
 */
function acquia_cms_common_module_preinstall($module) {
  // Since we have moved config 'workflows.workflow.editorial.yml'
  // to optional folder just to avoid error when common module
  // get installed on vanilla drupal with standard profile,
  // standard profile ship with 'workflows.workflow.editorial.yml'
  // config by default.
  if ($module == 'acquia_cms_common') {
    _acquia_cms_common_rewrite_configuration('workflows.workflow.editorial', 'acquia_cms_common');
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert() for node types.
 */
function acquia_cms_common_node_type_insert(NodeTypeInterface $node_type) {
  Drupal::classResolver(WorkflowFacade::class)->addNodeType($node_type);
  Drupal::classResolver(MetatagFacade::class)->addNodeType($node_type);
  Drupal::classResolver(SitemapFacade::class)->enableSitemap($node_type);
}

/**
 * Implements hook_ENTITY_TYPE_insert() for template types.
 */
function acquia_cms_common_workbench_email_template_insert(TemplateInterface $template_type) {
  Drupal::classResolver(WorkbenchEmailFacade::class)
    ->addTemplate($template_type);
}

/**
 * Implements hook_preprocess_HOOK() for html.
 */
function acquia_cms_common_preprocess_html(&$variables) {
  $path = Drupal::service('path.current')->getPath();
  if (\Drupal::moduleHandler()->moduleExists('imce') && Imce::access() && $path == '/imce') {
    $variables['attributes']['class'][] = 'acquia-cms';
    $variables['#attached']['library'][] = 'acquia_cms_common/imce';
  }
}

/**
 * Implements hook_form_alter() for html.
 */
function acquia_cms_common_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'views_exposed_form') {
    $form['edit-keywords-label'] = [
      '#type' => 'markup',
      '#markup' => '<label for="edit-keywords" class="visually-hidden">' . t('Search') . '</label>',
      '#allowed_tags' => [
        'label',
      ],
    ];
  }
}

/**
 * Implements hook_views_data().
 */
function acquia_cms_common_views_data() {
  return [
    'views' => [
      'main_listing_pages_view' => [
        'title' => t('Main listing pages - Text area'),
        'help' => t('Insert a text area inside a main view listing pages if the search server is available. If the view is not based on a Search API index, this behaves like a standard text area.'),
        'area' => [
          'id' => 'main_listing_pages_view',
        ],
      ],
    ],
  ];
}

/**
 * Implements hook_theme().
 */
function acquia_cms_common_theme($existing, $type, $theme, $path) {
  return [
    'page__system__403' => [
      'template' => 'page--system--403',
      'path' => $path . '/templates',
      'variables' => [
        'headline' => t('Access denied!'),
        'message' => t('You are not authorized to access this page.'),
        'button_home' => t('Back to home'),
        'button_search' => NULL,
      ],
    ],
    'page__system__404' => [
      'template' => 'page--system--404',
      'path' => $path . '/templates',
      'variables' => [
        'headline' => t('Whoops!'),
        'message' => t("We can't find the page you are looking for. You may find what you need on the home page:"),
        'button_home' => t('Back to home'),
        'button_search' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_ckeditor_css_alter().
 */
function acquia_cms_common_ckeditor_css_alter(&$css, $editor) {
  // Attach reset, plugin, base, theme, icon and fonts css files to ckeditor.
  $base_styles_edit_route = \Drupal::service('router.route_provider')
    ->getRoutesByNames(['entity.cohesion_base_styles.edit_form']);
  if (!(count($base_styles_edit_route) === 1)) {
    return;
  }

  $body_route = Url::fromRoute('entity.cohesion_base_styles.edit_form', ['cohesion_base_styles' => 'body']);
  $current_path = $body_route->isRouted() ? Url::fromRoute('<current>') : NULL;

  // If paths don't match.
  if ($current_path->getInternalPath() != $body_route->getInternalPath()) {

    try {
      // For "Filtered HTML" text format, set same styles as site studio format.
      if ($editor->getFilterFormat() &&  $editor->getFilterFormat()->get('format') == 'filtered_html') {
        $wysiwyg_cache_token = \Drupal::keyValue('cohesion.wysiwyg_cache_token');
        $wysiwyg_cache_buster = $wysiwyg_cache_token->get('cache_token') ? '?_t=' . $wysiwyg_cache_token->get('cache_token') : '';
        // Reset and ckeditor specific styles.
        $cohesionModulePath = \Drupal::service('extension.list.module')->getPath('cohesion');
        $streamWrapperManager = \Drupal::service('stream_wrapper_manager');
        $css[] = $cohesionModulePath . '/css/reset.css' . $wysiwyg_cache_buster;
        $css[] = $cohesionModulePath . '/css/plugin-styles.css' . $wysiwyg_cache_buster;

        $default_theme_id = \Drupal::service('theme_handler')->getDefault();

        if (\Drupal::service('cohesion.utils')->themeHasCohesionEnabled($default_theme_id)) {
          $css_base_filename = \Drupal::service('cohesion.local_files_manager')
            ->getStyleSheetFilename('base', $default_theme_id, TRUE);
          $css_theme_filename = \Drupal::service('cohesion.local_files_manager')
            ->getStyleSheetFilename('theme', $default_theme_id, TRUE);
          // Generated stylsheets.
          if ($streamWrapperManager->isValidUri($css_base_filename)) {
            $css[] = $streamWrapperManager->getViaUri($css_base_filename)->getExternalUrl() . $wysiwyg_cache_buster;
          }
          if ($streamWrapperManager->isValidUri($css_theme_filename)) {
            $css[] = $streamWrapperManager->getViaUri($css_theme_filename)->getExternalUrl() . $wysiwyg_cache_buster;
          }

        }
        // Add the body reset stylesheet.
        $css[] = $cohesionModulePath . '/css/cohesion-body-reset.css' . $wysiwyg_cache_buster;
      }
    }
    catch (\Exception $e) {

    }
  }

  // Icons and font libraries.
  if (($font_libraries = \Drupal::service('settings.endpoint.utils')
    ->siteLibraries('font_libraries'))) {
    $css = array_merge($css, $font_libraries);
  }

  if (($icon_libraries = \Drupal::service('settings.endpoint.utils')
    ->siteLibraries('icon_libraries'))) {
    $css = array_merge($css, $icon_libraries);
  }
  $css = array_filter($css);
  \Drupal::service('router.builder')->rebuildIfNeeded();
}

/**
 * Helper function to write configurations.
 *
 * @param string $config
 *   The name of configuration.
 * @param string $module
 *   The name of module.
 */
function _acquia_cms_common_rewrite_configuration(string $config, string $module) {
  $module_path = \Drupal::service('extension.list.module')->getPath($module);
  $module_path .= '/config/optional/' . $config . '.yml';
  $content = file_get_contents($module_path);
  $parsed_yml = Yaml::parse($content);

  $active_storage = \Drupal::service('config.storage');
  $active_storage->write($config, $parsed_yml);
}

/**
 * Helper function to update views display_options's style.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function _acquia_cms_common_update_view_display_options_style($view_name, $display_id = 'default', $views_template = NULL) {
  /** @var \Drupal\views\ViewEntityInterface $view */
  $view_storage = \Drupal::entityTypeManager()->getStorage('view');
  $view = $view_storage->load($view_name);
  if (empty($view)) {
    return;
  }
  $display = &$view->getDisplay($display_id);
  $style_type = $display['display_options']['style']['type'] ?? NULL;
  if ($style_type && $style_type !== 'cohesion_layout') {
    $display['display_options']['style']['type'] = 'cohesion_layout';
    $display['display_options']['style']['options'] = [
      'views_template' => $views_template ?? 'view_tpl_' . $view_name,
      'master_template' => 'master_template_boxed',
    ];
    $view_storage->save($view);
  }
}

/**
 * Implements hook_mail_alter().
 */
function acquia_cms_common_mail_alter(&$message) {
  if (strpos($message['key'], 'template::') === 0) {
    if ((!empty($message['from'])) && ($message['from'] === 'no-reply@example.com')) {
      $message['send'] = 'false';
    }
  }
}

/**
 * Implements hook_system_breadcrumb_alter().
 *
 * This fixes the issue: https://www.drupal.org/project/drupal/issues/3220437.
 *
 * @todo Remove below & tests (NodeBreadcrumbTest) code once we have the stable working
 * patch for this issue.
 */
function acquia_cms_common_system_breadcrumb_alter(Breadcrumb &$breadcrumb, RouteMatchInterface $route_match, array $context) {
  if ($route_match->getRouteName() == "node.add" || $route_match->getRouteName() == "entity.node.edit_form") {
    foreach ($breadcrumb->getLinks() as &$link) {
      if (!$link->getText() && $link->getUrl()->getRouteName() == "view.frontpage.page_1") {
        $link->setText(t("Node"));
        break;
      }
    }
    $breadcrumb->addCacheTags(['config:views.view.frontpage']);
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function acquia_cms_common_module_implements_alter(&$implementations, $hook) {
  // Prevent installation of site studio package on module install during
  // site installation as we are already doing the same the end.
  // This way we can improve installation time.
  if ($hook == 'modules_installed' && InstallerKernel::installationAttempted()) {
    unset($implementations['cohesion_sync']);
  }
}
