<?php

/**
 * @file
 * Contains hook implementations for common, shared Acquia CMS functionality.
 */

use Drupal\acquia_cms_common\Facade\MetatagFacade;
use Drupal\acquia_cms_common\Facade\WorkbenchEmailFacade;
use Drupal\acquia_cms_common\Facade\WorkflowFacade;
use Drupal\Core\Form\FormStateInterface;
use Drupal\imce\Imce;
use Drupal\node\NodeTypeInterface;
use Drupal\search_api\Plugin\views\query\SearchApiQuery;
use Drupal\search_api\SearchApiException;
use Drupal\views\ViewExecutable;
use Drupal\workbench_email\TemplateInterface;

/**
 * Implements hook_ENTITY_TYPE_insert() for node types.
 */
function acquia_cms_common_node_type_insert(NodeTypeInterface $node_type) {
  Drupal::classResolver(WorkflowFacade::class)->addNodeType($node_type);
  Drupal::classResolver(MetatagFacade::class)->addNodeType($node_type);
}

/**
 * Implements hook_ENTITY_TYPE_insert() for template types.
 */
function acquia_cms_common_workbench_email_template_insert(TemplateInterface $template_type) {
  Drupal::classResolver(WorkbenchEmailFacade::class)
    ->addTemplate($template_type);
}

/**
 * Implements hook_preprocess_HOOK() for html.
 */
function acquia_cms_common_preprocess_html(&$variables) {
  $path = Drupal::service('path.current')->getPath();
  if (Imce::access() && $path == '/imce') {
    $variables['attributes']['class'][] = 'acquia-cms';
    $variables['#attached']['library'][] = 'acquia_cms_common/imce';
  }
}

/**
 * Implements hook_form_alter() for html.
 */
function acquia_cms_common_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'views_exposed_form') {
    $form['edit-keywords-label'] = [
      '#type' => 'markup',
      '#markup' => '<label for="edit-keywords" class="visually-hidden">' . t('Search') . '</label>',
      '#allowed_tags' => [
        'label',
      ],
    ];
  }
}

/**
 * Implements hook_views_pre_render().
 */
function acquia_cms_common_views_pre_render(ViewExecutable $view) {
  $listing_pages = ['articles', 'search', 'events', 'people', 'places'];
  if (in_array($view->id(), $listing_pages)) {
    // Main view has the two no result behaviour, so when server is not
    // available, we want to hide the no result behaviour - text area message
    // of main view from fallback pages.
    if (!is_server_available($view)) {
      unset($view->empty['area']);
    }
  }
}

/**
 * Checks if the Search API server for view is available.
 *
 * @param object $view
 *   View object.
 *
 * @return bool
 *   TRUE if the server is available, FALSE otherwise. If the view's query
 *   handler is not Search API's query handler, returns TRUE.
 */
function is_server_available($view) : bool {
  $query = $view->getQuery();
  if ($query instanceof SearchApiQuery) {
    if ($query->shouldAbort()) {
      return FALSE;
    }
    try {
      return $query->getIndex()
        ->getServerInstance()
        ->getBackend()
        ->isAvailable();
    }
    catch (SearchApiException $e) {
      return FALSE;
    }
  }
  return TRUE;
}
