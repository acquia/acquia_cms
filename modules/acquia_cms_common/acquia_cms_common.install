<?php

/**
 * @file
 * Install, update and uninstall functions for the acquia_cms_common module.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\user\RoleInterface;
use Drupal\workbench_email\Entity\Template;

/**
 * Implements hook_install().
 */
function acquia_cms_common_install($is_syncing) {
  if (!$is_syncing) {
    user_role_grant_permissions('anonymous', [
      'access content',
      'view media',
    ]);
    user_role_grant_permissions('authenticated', [
      'access content',
      'view media',
    ]);

    // Enable acquia_claro theme.
    $themesList = \Drupal::service('extension.list.theme')->getList();
    $themesInstall = ["olivero"];
    if (isset($themesList['acquia_claro'])) {
      $themesInstall[] = "acquia_claro";
    }
    \Drupal::service('theme_installer')->install($themesInstall);
    \Drupal::configFactory()->getEditable('system.theme')->set('default', 'olivero')->save();
    if (in_array("acquia_claro", $themesInstall)) {
      \Drupal::configFactory()->getEditable('system.theme')->set('admin', "acquia_claro")->save();
    }

    $module_handler = \Drupal::moduleHandler();
    // Re-write the content and media view on module install,
    // since we have moved this config in optional directory.
    $module_path = $module_handler->getModule('acquia_cms_common')->getPath();
    $config_optional = $module_path . '/config/optional';
    $source_optional_dir = new FileStorage($config_optional);

    $config_storage = \Drupal::service('config.storage');
    $config_storage->write('views.view.content', $source_optional_dir->read('views.view.content'));
    $config_storage->write('views.view.media', $source_optional_dir->read('views.view.media'));

    // Get existing config ignore settings and append the new one.
    $config = \Drupal::configFactory()->getEditable('config_ignore.settings');
    $existing_ignore_config = $config->get('ignored_config_entities');
    $new_ignore_config = [
      'language.entity.*',
      'cohesion.settings',
    ];
    $updated_ignore_config = array_unique(array_merge($existing_ignore_config, $new_ignore_config));
    $config->set('ignored_config_entities', $updated_ignore_config);
    $config->set('enable_export_filtering', TRUE);
    $config->save(TRUE);

    $module_installer = \Drupal::service('module_installer');
    if ($module_handler->moduleExists('page_cache')) {
      // Uninstall page_cache module in favour of memcache.
      $module_installer->uninstall(['page_cache']);
    }

    /*
     * We've to explicitly set purge plugin as acquia_purge, If Acquia Purge
     * module is enabled, else this would give below error:
     *
     * ERROR: Purgers:There is no purger loaded which means you need a module
     * enabled to provide a purger plugin to clear your external cache or CDN.
     */
    if ($module_handler->moduleExists('acquia_purge')) {
      $config = \Drupal::service('purge.purgers');
      $config->setPluginsEnabled(['cee22bc3fe' => 'acquia_purge']);
    }

    // Install the syslog module and purge sub-modules.
    $module_installer->install([
      'syslog',
      'purge_processor_lateruntime',
      'purge_processor_cron',
      'purge_ui',
    ]);
  }
}

/**
 * Implements hook_config_schema_info_alter().
 */
function acquia_cms_common_config_schema_info_alter(&$definitions) {
  $schemaMapping = [
    'type' => 'mapping',
    'mapping' => [
      'default_value' => ['type' => 'boolean'],
      'disable' => ['type' => 'boolean'],
      'hidden' => ['type' => 'boolean'],
    ],
  ];
  $definitions['entity_clone.settings']['mapping']['form_settings']['mapping']['cohesion_layout'] = $schemaMapping;
  $definitions['entity_clone.settings']['mapping']['form_settings']['mapping']['component_content'] = $schemaMapping;
  $definitions['entity_clone.settings']['mapping']['form_settings']['mapping']['content_moderation_state'] = $schemaMapping;
  $definitions['entity_clone.settings']['mapping']['form_settings']['mapping']['crop'] = $schemaMapping;
  $definitions['entity_clone.settings']['mapping']['form_settings']['mapping']['media'] = $schemaMapping;
  $definitions['entity_clone.settings']['mapping']['form_settings']['mapping']['path_alias'] = $schemaMapping;
  $definitions['entity_clone.settings']['mapping']['form_settings']['mapping']['redirect'] = $schemaMapping;
  $definitions['entity_clone.settings']['mapping']['form_settings']['mapping']['search_api_task'] = $schemaMapping;
  $definitions['config_ignore.settings']['mapping']['enable_export_filtering'] = [
    'type' => 'boolean',
    'label' => 'Enable export filtering',
  ];
}

/**
 * Add new text format 'Full HTML'.
 */
function acquia_cms_common_update_8001() {
  // Do not override existing full_html, if already provide.
  $config_full_html = \Drupal::config('filter.format.full_html')->get('name');
  if (!$config_full_html) {
    $module_path = \Drupal::moduleHandler()->getModule('acquia_cms_common')->getPath();
    $config_optional = $module_path . '/config/optional';
    $source_optional_dir = new FileStorage($config_optional);

    $config_storage = \Drupal::service('config.storage');
    $config_storage->write('filter.format.full_html', $source_optional_dir->read('filter.format.full_html'));
    $config_storage->write('editor.editor.full_html', $source_optional_dir->read('editor.editor.full_html'));

    // Now update each role's permission to use newly added text format.
    $role_ids = [
      'administrator',
      'content_administrator',
      'content_author',
      'content_editor',
      'developer',
      'site_builder',
    ];
    $user_role = \Drupal::entityTypeManager()->getStorage('user_role')->loadMultiple($role_ids);
    foreach ($user_role as $role) {
      $role->grantPermission('use text format full_html');
      $role->save();
    }
  }
}

/**
 * Update role permissions for site studio.
 *
 * Update permissions for Content Administrator and Content Author.
 */
function acquia_cms_common_update_8002() {
  // Update role permission code moved to site studio.
  // Keeping this update hook as existing customers are using it.
}

/**
 * Implements hook_content_model_role_presave_alter().
 */
function acquia_cms_common_content_model_role_presave_alter(RoleInterface &$role) {
  // Update permissions to specified role on the basis of the module.
  $modules_permission = [
    'shield' => 'administer shield',
    'honeypot' => 'administer honeypot',
    'captcha' => 'administer CAPTCHA settings',
    'recaptcha' => 'administer recaptcha',
  ];
  if ($role->id() == 'user_administrator') {
    foreach ($modules_permission as $module => $permission) {
      if (\Drupal::moduleHandler()->moduleExists($module)) {
        $role->grantPermission($permission);
      }
    }
  }
}

/**
 * Implements hook_update_N().
 *
 * Add referenced image view mode.
 */
function acquia_cms_common_update_8003() {
  // Add referenced image view mode.
  _acquia_cms_common_rewrite_configuration('core.entity_view_mode.node.referenced_image', 'acquia_cms_common');
}

/**
 * Implements hook_update_N().
 *
 * Remove third party settings for workbench email.
 */
function acquia_cms_common_update_8004() {
  foreach (Template::loadMultiple() as $template) {
    if (!empty($template->getThirdPartySetting('acquia_cms_common', 'workflow_transitions'))) {
      $template->unsetThirdPartySetting('acquia_cms_common', 'workflow_transitions');
      $template->unsetThirdPartySetting('acquia_cms_common', 'workflow_id');
      $template->save();
    }
  }
}

/**
 * Implements hook_update_N().
 *
 * Re-run hook: acquia_cms_common_update_8004().
 */
function acquia_cms_common_update_8005() {
  // Re-running hook: hook_update_8004() as 1.8.x release of acquia_cms_common
  // module contains another hook.
  acquia_cms_common_update_8004();
}

/**
 * Implements hook_update_N().
 *
 * Update the config_ignore.settings.
 */
function acquia_cms_common_update_8006() {
  $config = \Drupal::configFactory()->getEditable('config_ignore.settings');
  if ($config) {
    $existing_ignore_configs = $config->get('ignored_config_entities');
    $updated_ignored_configs = array_values(
      array_diff($existing_ignore_configs, [
        "media.type.image:uuid",
        "crop.type.focal_point:uuid",
      ]),
    );
    if ($existing_ignore_configs != $updated_ignored_configs) {
      $config->set('ignored_config_entities', $updated_ignored_configs)
        ->save(TRUE);
    }
  }
}
