<?php

/**
 * @file
 * Contains installation and update hooks for Acquia CMS Development.
 */

use Acquia\DrupalEnvironmentDetector\AcquiaDrupalEnvironmentDetector as Environment;
use Drupal\acquia_connector\Helper\Storage as ConnectorStorage;
use Drupal\acquia_connector\Subscription;
use Drupal\acquia_search_solr\Helper\Storage as SolrStorage;

/**
 * Implements hook_install().
 */
function acquia_cms_development_install() {
  $key = 'b560ae0de7e596c5d1f7fe54803c70cd';
  $identifier = 'BGVZ-196143';

  _acquia_connector_config($key, $identifier);
  _acquia_search_solr_config($key, $identifier);

  // Configure shield if it is an Acquia cloud environment (but not an IDE).
  if (Environment::isAhEnv() && !Environment::isAhIdeEnv()) {
    \Drupal::service('module_installer')->install(['shield']);
    Drupal::configFactory()
      ->getEditable('shield.settings')
      ->set('credentials.shield.user', 'acms')
      ->set('credentials.shield.pass', 'DmpU05sN13o1@bQ!')
      ->save();
  }

  // Since Acquia solr search view is disabled, the exposed form filter block
  // for this view is broken. Delete the broken block.
  $block = \Drupal::service('entity_type.manager')->getStorage('block');
  $block->load('exposed_form_acquia_search_solr_page')->delete();

  // Both PubSec and Starter "really" need Google Maps API Keys to "work."
  // This code is a work around for the dev team to ensure that we can install
  // these modules w/o issue until a more permanent API key is supplied by
  // Acquia AND/OR we provide a free maps option.
  // @todo remove this once the above conditions are met.
  Drupal::configFactory()
    ->getEditable('geocoder.geocoder_provider.googlemaps')
    ->set('configuration.apiKey', 'AIzaSyBr7XorQ408VCspnrw-F6-2i3t2g0W5Se4')
    ->save();
}

/**
 * Pre-configures the Acquia Connector for development use.
 *
 * @param string $key
 *   The Acquia hosting key.
 * @param string $identifier
 *   The Acquia hosting identifier.
 */
function _acquia_connector_config(string $key, string $identifier) {
  $config = \Drupal::configFactory()->getEditable('acquia_connector.settings');

  // Replicating Storage from acquia_connector/src/Form/CredentialForm.php.
  $storage = new ConnectorStorage();
  $storage->setKey($key);
  $storage->setIdentifier($identifier);

  // @todo This code was copied verbatim from the Acquia Connector module, but
  // it's not at all clear why it uses this face-melter of a cache clear. (My
  // guess is that the original authors were flailing.) Replace this with a more
  // precise and lightweight cache invalidation or similar ASAP.
  drupal_flush_all_caches();

  $subscription = new Subscription();
  $subscription->update();

  // Setting specific config for Acquia Connector.
  $config->set('subscription_name', "Aqquia Engineering");
  $config->set('hide_signup_messages', 1);
  $config->save();
}

/**
 * Pre-configures the Acquia Search Solr module for development use.
 *
 * @param string $key
 *   The Acquia hosting key.
 * @param string $identifier
 *   The Acquia hosting identifier.
 */
function _acquia_search_solr_config(string $key, string $identifier) {
  // Replicating Storage from acquia_search_solr/src/Form/SettingsForm.php.
  $storage = new SolrStorage();
  $storage->setApiHost('https://api.sr-prod02.acquia.com');
  $storage->setUuid('f63c4427-2738-4e14-a756-5f7b80b74062');
  $storage->setApiKey($key);
  $storage->setIdentifier($identifier);

  // @todo This code was copied verbatim from the Acquia Search Solr module,
  // but it's not at all clear why it uses this face-melter of a cache clear.
  // (My guess is that the original authors were flailing.) Replace this with a
  // more precise and lightweight cache invalidation or similar ASAP.
  drupal_flush_all_caches();
}
