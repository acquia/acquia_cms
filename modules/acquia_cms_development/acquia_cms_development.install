<?php

/**
 * @file
 * Contains installation and update hooks for Acquia CMS Development.
 */

use Acquia\DrupalEnvironmentDetector\AcquiaDrupalEnvironmentDetector as Environment;
use Drupal\acquia_connector\Helper\Storage as ConnectorStorage;
use Drupal\acquia_connector\Subscription;
use Drupal\acquia_search\Helper\Storage as SolrStorage;
use Drupal\cohesion\Form\GoogleMapApiKeyForm;
use Drupal\Core\Form\FormState;

/**
 * Implements hook_install().
 */
function acquia_cms_development_install() {

  $key = getenv('CONNECTOR_KEY');
  $identifier = getenv('CONNECTOR_ID');
  if (isset($key, $identifier)) {

    _acquia_connector_config($key, $identifier);
    _acquia_search_config($key, $identifier);
  }

  // Configure shield if it is an Acquia cloud environment (but not an IDE).
  if (Environment::isAhEnv() && !Environment::isAhIdeEnv()) {

    $shield_user = getenv('SHIELD_USER');
    $shield_pass = getenv('SHIELD_PASS');
    if (isset($shield_user, $shield_pass)) {
      \Drupal::service('module_installer')->install(['shield']);
      Drupal::configFactory()
        ->getEditable('shield.settings')
        ->set('credentials.shield.user', $shield_user)
        ->set('credentials.shield.pass', $shield_pass)
        ->save();
    }
  }

  // Starter "really" needs Google Maps API Keys to "work."
  // This code is a work around for the dev team to ensure that we can install
  // these modules w/o issue until a more permanent API key is supplied by
  // Acquia AND/OR we provide a free maps option.
  // @todo remove this once the above conditions are met.
  $gmaps_key = getenv('GMAPS_KEY');
  if (!empty($gmaps_key)) {
    \Drupal::configFactory()
      ->getEditable('geocoder.geocoder_provider.googlemaps')
      ->set('configuration.apiKey', $gmaps_key)
      ->save();

    // Programmatically submit Site Studio (cohesion) Google Map configuration
    // form passing the Google Maps key because this will update the cohesion
    // google-map element templates, updating the asset url with this Google Map
    // key.So when user visit the content page of place content type, this won't
    // show the modal popup error i.e The Google Map cannot be loaded.
    // @see \Drupal\cohesion\Form\GoogleMapApiKeyForm
    $form = \Drupal::formBuilder()->getForm('\Drupal\cohesion\Form\GoogleMapApiKeyForm');
    $form_state = new FormState();
    $values['google_map_api_key'] = $gmaps_key;
    $form_state->setValues($values);
    \Drupal::classResolver(GoogleMapApiKeyForm::class)->submitForm($form, $form_state);
  }
}

/**
 * Pre-configures the Acquia Connector for development use.
 *
 * @param string $key
 *   The Acquia hosting key.
 * @param string $identifier
 *   The Acquia hosting identifier.
 */
function _acquia_connector_config(string $key, string $identifier) {
  $config = \Drupal::configFactory()->getEditable('acquia_connector.settings');

  // Replicating Storage from acquia_connector/src/Form/CredentialForm.php.
  $storage = new ConnectorStorage();
  $storage->setKey($key);
  $storage->setIdentifier($identifier);

  // @todo This code was copied verbatim from the Acquia Connector module, but
  // it's not at all clear why it uses this face-melter of a cache clear. (My
  // guess is that the original authors were flailing.) Replace this with a more
  // precise and lightweight cache invalidation or similar ASAP.
  drupal_flush_all_caches();

  $subscription = new Subscription();
  $subscription->update();

  // Setting specific config for Acquia Connector.
  $config->set('subscription_name', "Acquia Engineering");
  $config->set('hide_signup_messages', 1);
  $config->save();
}

/**
 * Pre-configures the Acquia Search Solr module for development use.
 *
 * @param string $key
 *   The Acquia hosting key.
 * @param string $identifier
 *   The Acquia hosting identifier.
 */
function _acquia_search_config(string $key, string $identifier) {

  // Replicating Storage from acquia_search/src/Helper/Storage.php.
  $search_uuid = getenv('SEARCH_UUID');
  if (isset($search_uuid)) {
    $storage = new SolrStorage();
    $storage->setApiHost('https://api.sr-prod02.acquia.com');
    $storage->setUuid($search_uuid);
    $storage->setApiKey($key);
    $storage->setIdentifier($identifier);

    // @todo This code was copied verbatim from the Acquia Search module,
    // but it's not at all clear why it uses this face-melter of a cache clear.
    // (My guess is that the original authors were flailing.) Replace this with
    // a more precise and lightweight cache invalidation or similar ASAP.
    drupal_flush_all_caches();
  }
}
