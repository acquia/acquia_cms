<?php

/**
 * @file
 * Install, update and uninstall functions for the acquia_cms_headless module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\user\Entity\Role;
use Drupal\user\RoleInterface;

/**
 * Implements hook_install().
 */
function acquia_cms_headless_install() {
  // Call the headless service.
  $headless_user = \Drupal::service('acquia_cms_headless.starterkit_nextjs');

  // Programmatically create a new "headless" user.
  $headless_user->createHeadlessUser();

  // Adds the necessary permissions to roles.
  add_next_site_permissions();
}

/**
 * Adds the necessary permissions to anonymous & authenticated roles.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function add_next_site_permissions() {
  $rolesStorage = \Drupal::entityTypeManager()->getStorage('user_role');
  $roles = $rolesStorage->loadMultiple([
    RoleInterface::ANONYMOUS_ID,
    RoleInterface::AUTHENTICATED_ID,
  ]);
  foreach ($roles as $role) {
    $role->grantPermission('issue subrequests');
    $role->save();
  }
}

/**
 * Install and update new headless roles.
 */
function acquia_cms_headless_update_8001() {
  $role = Role::load('headless');
  $permissions = [
    'view any unpublished content',
    'view latest version',
    'view all revisions',
  ];
  if ($role instanceof Role) {
    $role->set('label', 'Headless Administrator');
    foreach ($permissions as $permission) {
      $role->grantPermission($permission);
    }
    $role->trustData()->save();
  }
  // Create Frontend site with preview role.
  $role = Role::create([
    'id' => 'frontend_site_with_preview',
    'label' => 'Frontend site with preview',
    'permissions' => $permissions,
    'dependencies' => [
      'enforced' => [
        'module' => ['acquia_cms_headless'],
      ],
    ],
  ]);
  $role->trustData()->save();
}

/**
 * Implements hook_update_N().
 *
 * Update all consumers and assign content model roles and add
 * provide `issue subrequests` permission to authenticated & anonymous role.
 */
function acquia_cms_headless_update_8002() {
  $rolesStorage = \Drupal::entityTypeManager()->getStorage('user_role');
  $query = $rolesStorage->getQuery();
  $roleIds = $query
    ->accessCheck(FALSE)
    ->condition('id', ["authenticated", "anonymous", "headless"], 'NOT IN')
    ->execute();
  $config = \Drupal::configFactory()->getEditable('acquia_cms_headless.settings');
  if ($config->get('consumer_uuid')) {
    $consumer = \Drupal::service('entity.repository')->loadEntityByUuid("consumer", $config->get('consumer_uuid'));
    if ($consumer instanceof EntityInterface && $consumer->user_id->entity instanceof EntityInterface) {
      $user = $consumer->user_id->entity;
      foreach ($roleIds as $roleId) {
        $user->addRole($roleId);
      }
      $user->save();
    }
  }
  add_next_site_permissions();
}

/**
 * Disable X-Frame-Options for headless.
 */
function acquia_cms_headless_update_8003() {
  if (\Drupal::moduleHandler()->moduleExists('seckit')) {
    $config = \Drupal::configFactory()->getEditable('seckit.settings');
    $config->set("seckit_clickjacking.x_frame", '0')->save();
  }
}

/**
 * Implements hook_update_N().
 * Update existing permission with new permission
 */
function acquia_cms_headless_update_8004() {
  user_role_grant_permissions('headless', [
    'access acquia cms headless dashboard',
  ]);
  user_role_revoke_permissions('headless', [
    'access acquia cms headless api dashboard',
  ]);
}
