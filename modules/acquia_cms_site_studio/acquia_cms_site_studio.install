<?php

/**
 * @file
 * Contains install-time code for the Acquia CMS profile.
 */

use Drupal\Core\Installer\InstallerKernel;

/**
 * Implements hook_install().
 *
 * @throws Exception
 */
function acquia_cms_site_studio_install() {
  $site_studio_api_key = getenv('SITESTUDIO_API_KEY');
  $site_studio_org_key = getenv('SITESTUDIO_ORG_KEY');

  // Set default theme as cohesion.
  set_theme_site_studio_as_default();

  // Don't do anything during site installation, since that can have unintended
  // side effects. We have separate task in acquia_cms profile which do the same
  // thing if this module is being installed as part of profile.
  // @see $tasks['install_acms_site_studio_initialize'] & $tasks['install_acms_site_studio_ui_kit'].
  if (!InstallerKernel::installationAttempted() && $site_studio_api_key && $site_studio_org_key) {
    // Set credentials if module being installed independently.
    set_site_studio_credentials($site_studio_api_key, $site_studio_org_key);

    // If the user has configured their Cohesion keys, and site studio module
    // exists lets import all elements and its components.
    batch_set(install_acms_site_studio_initialize());
    batch_set(site_studio_import_ui_kit());

    // Invoke site studio rebuild if module is being install via UI.
    if (PHP_SAPI !== 'cli') {
      acquia_cms_site_studio_rebuild_styles();
    }
  }

  // Update search & search_fallback views display_options's style
  // type as cohesion_layout and option's views_template & master_template
  // if acquia_cms_site_studio module is present else use default one.
  $module_handler = \Drupal::moduleHandler();
  if ($module_handler->moduleExists('acquia_cms_search')) {
    _acquia_cms_common_update_view_display_options_style('search');
    _acquia_cms_common_update_view_display_options_style('search_fallback');

    // Disable acquia_search view provided by Acquia Search Solrmodule,
    // so that search view provided by acquia_cms_search module can be used
    // which will allow content's related test to pass in isolation.
    $view_storage = \Drupal::entityTypeManager()->getStorage('view');
    if (!empty($view_storage->load('acquia_search'))) {
      $view_storage->load('acquia_search')
        ->setStatus(FALSE)
        ->save();
    }
  }
}

/**
 * Update site studio credentials from environment.
 *
 * @param string $site_studio_api_key
 *   The site studio api key.
 * @param string $site_studio_org_key
 *   The site studio organisation key.
 */
function set_site_studio_credentials(string $site_studio_api_key, string $site_studio_org_key) {
  \Drupal::configFactory()->getEditable('cohesion.settings')
    ->set('api_key', $site_studio_api_key)
    ->set('organization_key', $site_studio_org_key)
    ->save(TRUE);
}

/**
 * Set default theme as site studio theme.
 */
function set_theme_site_studio_as_default() {
  \Drupal::service('theme_installer')->install(['cohesion_theme']);
  \Drupal::configFactory()
    ->getEditable('system.theme')
    ->set('default', 'cohesion_theme')
    ->save();
}

/**
 * Use IMCE for inserting images into Site Studio configuration.
 */
function acquia_cms_site_studio_update_8001() {
  // Using media browser, creates problem if you ever want to export
  // the configuration using the Site Studio package manager
  // as the media entity won't be included as Site Studio
  // does not export content entities as part of packages.
  $config = \Drupal::service('config.factory')->getEditable('cohesion.settings');
  $config->set('image_browser', [
    'config' => [
      'type' => 'imce_imagebrowser',
      'dx8_entity_browser' => 'media_browser',
      'cohesion_media_lib_types' => ['image'],
      'dx8_imce_stream_wrapper' => 'public',
    ],
  ]);
  $config->save();
}
