<?php

/**
 * @file
 * Install, update and uninstall functions for the acquia_cms_event module.
 */

use Drupal\user\RoleInterface;

/**
 * Implements hook_content_model_role_presave_alter().
 */
function acquia_cms_event_content_model_role_presave_alter(RoleInterface &$role) {
  switch ($role->id()) {
    case 'content_author':
      foreach ([
        'create event content',
        'edit own event content',
        'delete own event content',
      ] as $permission) {
        $role->grantPermission($permission);
      }
      break;

    case 'content_editor':
      foreach (['edit any event content', 'delete any event content'] as $permission) {
        $role->grantPermission($permission);
      }
      break;
  }
}

/**
 * Implements hook_module_preinstall().
 */
function acquia_cms_event_module_preinstall($module) {
  \Drupal::service('acquia_cms_common.utility')->setModulePreinstallTriggered($module);
}

/**
 * Update past events views display & its title.
 */
function acquia_cms_event_update_8001() {
  $configFactory = \Drupal::service('config.factory');
  $config = $configFactory->getEditable('views.view.event_cards');
  if (!empty($config)) {
    $config->set('display.past_events_block.display_title', 'Past Events')
      ->set('display.past_events_block.display_options.title', '')->save();
  }
}

/**
 * Implements hook_update_N().
 *
 * Update node type conditions from node_type to entity_bundle.
 */
function acquia_cms_event_update_8002() {
  // Load all pattern configuration entities.
  $pattern_config = \Drupal::configFactory()->getEditable('pathauto.pattern.event_path');

  // Loop patterns and swap the node_type plugin by the entity_bundle:node
  // plugin.
  if ($pattern_config->get('type') === 'canonical_entities:node') {
    $selection_criteria = $pattern_config->get('selection_criteria');
    foreach ($selection_criteria as $uuid => $condition) {
      if ($condition['id'] === 'node_type') {
        $pattern_config->set("selection_criteria.$uuid.id", 'entity_bundle:node');
        $pattern_config->save();
        break;
      }
    }
  }
}

/**
 * Implements hook_update_N().
 *
 * Update Event display modes.
 */
function acquia_cms_event_update_8003() {
  // Load and update default view mode.
  $event_image_field = [
    'field_event_image' => [
      'type' => 'entity_reference_entity_view',
      'label' => 'hidden',
      'settings' => [
        'view_mode' => 'full',
        'link' => 'false',
      ],
      'third_party_settings' => [],
      'weight' => 2,
      'region' => 'content',
    ],
  ];
  $display_modes = [
    'default',
    'card',
    'horizontal_card',
    'search_results',
    'teaser',
  ];
  $view_modes = [
    'large_super_landscape',
    'small_landscape',
    'small_landscape',
    'teaser',
    'teaser',
  ];
  // Update Image field.
  foreach ($display_modes as $key => $display_mode) {
    $event_view_mode = \Drupal::configFactory()->getEditable('core.entity_view_display.node.event.' . $display_mode);
    if ($event_view_mode->get('hidden.field_event_image')) {
      $event_image_field['field_event_image']['settings']['view_mode'] = $view_modes[$key];
      $event_view_mode->set('content', array_merge($event_view_mode->get('content'), $event_image_field));
      if ($event_view_mode->get('content.body')) {
        $event_view_mode->set('content.body.weight', $event_view_mode->get('content.body.weight') + 1);
      }
      if ($event_view_mode->get('content.field_event_end')) {
        $event_view_mode->set('content.field_event_end.weight', $event_view_mode->get('content.field_event_end.weight') + 1);
      }
      if ($event_view_mode->get('content.field_event_place')) {
        $event_view_mode->set('content.field_event_place.weight', $event_view_mode->get('content.field_event_place.weight') + 1);
      }
      if ($event_view_mode->get('content.field_event_start')) {
        $event_view_mode->set('content.field_event_start.weight', $event_view_mode->get('content.field_event_start.weight') + 1);
      }
      $event_view_mode->clear('hidden.field_event_image');
      $event_view_mode->save();
    }
  }

  // Update Place field.
  $event_view_mode = \Drupal::configFactory()->getEditable('core.entity_view_display.node.event.default');
  if ($event_view_mode->get('content.field_event_place.type') == 'entity_reference_label') {
    $event_view_mode->set('content.field_event_place.type', 'entity_reference_entity_view');
    $event_view_mode->set('content.field_event_place.settings.view_mode', 'referenced_image');
    $event_view_mode->save();
  }

}
