name: "Acquia CMS CI"
on:
  push:
    branches: [ develop, qa, stage, main, release/*, feature/* ]
    paths-ignore:
      - README.md
  pull_request:
#    branches: [ develop ]
    paths-ignore:
      - README.md
jobs:
  static_code_analysis:
    runs-on: ubuntu-latest
    env:
      # Provide your package's name.
      ORCA_SUT_NAME: acquia/acquia_cms
      ORCA_SUT_BRANCH: develop
      ORCA_VERSION: ^3.0
      ORCA_PACKAGES_CONFIG_ALTER: ../acquia_cms/tests/packages_alter.yml
      ORCA_REPOSITORIES_ALTER: ../acquia_cms/tests/repositories_alter.yml
      ORCA_FIXTURE_PROJECT_TEMPLATE: acquia/drupal-recommended-project
      ORCA_ENABLE_NIGHTWATCH: "FALSE"
      ORCA_PHPCS_STANDARD: AcquiaPHP
      ORCA_SUT_DIR: /home/runner/work/acquia_cms/acquia_cms
      COMPOSER_PROCESS_TIMEOUT: 1800
      ORCA_JOB: ${{ matrix.orca-job }}
      GITHUB_EVENT: $ {{ github.event_name }}
      JOB_TYPE: "static-code-analysis"
      #ACMS_JOB: ${{ matrix.acms-job}}
    strategy:
      matrix:
        orca-job:
          - STATIC_CODE_ANALYSIS
          - STRICT_DEPRECATED_CODE_SCAN
        #php-version: [ "8.1" ]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js 12.13.1
        uses: actions/setup-node@v3
        with:
          node-version: 12.13.1
      - uses: shivammathur/setup-php@v2
        with:
          php-version: 8.1
          #coverage: xdebug
      - name: Download ORCA
        run: |
          composer self-update
          composer create-project --no-dev --ignore-platform-req=php acquia/orca ../orca "$ORCA_VERSION" -n
          curl https://gist.githubusercontent.com/vishalkhode1/56497e23daa300d0634139828e98cb04/raw/b2bbe36dd58806aaca5e7da4f415a8b623fdbc88/merge_plugin.patch | git -C ../orca apply
          curl https://gist.githubusercontent.com/vishalkhode1/ef6c7ebace871612266ad61f3aab2593/raw/611dbc591e9625f292404bb73832e7ac23a2368d/alter-repository.patch | git -C ../orca apply
          # Remove internal module dependencies, so that ORCA CI doesn't report error.
          if [ "${ORCA_JOB}" != "STATIC_CODE_ANALYSIS" ]; then for path in $(find modules -type f -maxdepth 2 -name "composer.json" -exec ls '{}' ';'); do sed -i '/\"drupal\/acquia_cms.*\":.*\".*\"/d' $path; done; fi
      - name: Before Install
        run: ../orca/bin/ci/before_install.sh
      - name: Install
        run: ./tests/ci/install.sh
      - name: Before script
        run: ../orca/bin/ci/before_script.sh
      - name: Script
        run: ./tests/ci/script.sh
      - name: Before Cache
        run: ../orca/bin/ci/before_cache.sh
      - name: After script
        run: |
          ../orca/bin/ci/after_success.sh
          ../orca/bin/ci/after_failure.sh
          ../orca/bin/ci/after_script.sh

  integrated_tests:
    name: ${{ matrix.acms_job }} (${{ matrix.orca-job }})
    runs-on: ubuntu-latest
    env:
      # Site test artifacts.
      #ACMS_DB_ARTIFACT: "/home/runner/work/acquia_cms/acquia_cms/tests/acms.sql.gz"
      #ACMS_FILES_ARTIFACT: "/home/runner/work/acquia_cms/acquia_cms/tests/acms-files.tar.gz"
      #ACMS_STARTER_DB_ARTIFACT: "/home/runner/work/acquia_cms/acquia_cms/tests/acms-starter.sql.gz"
      #ACMS_STARTER_FILES_ARTIFACT: "/home/runner/work/acquia_cms/acquia_cms/tests/acms-files-starter.tar.gz"
      # Provide your package's name.
      ORCA_SUT_NAME: acquia/acquia_cms
      ORCA_SUT_BRANCH: develop
      ORCA_VERSION: ^3.0
      ORCA_PACKAGES_CONFIG_ALTER: ../acquia_cms/tests/packages_alter.yml
      ORCA_REPOSITORIES_ALTER: ../acquia_cms/tests/repositories_alter.yml
      ORCA_FIXTURE_PROJECT_TEMPLATE: acquia/drupal-recommended-project
      ORCA_ENABLE_NIGHTWATCH: "FALSE"
      ORCA_PHPCS_STANDARD: AcquiaPHP
      ORCA_SUT_DIR: /home/runner/work/acquia_cms/acquia_cms
      COMPOSER_PROCESS_TIMEOUT: 1800
      ORCA_JOB: ${{ matrix.orca-job }}
      #AWS_S3_BUCKET_PATH: s3://acquia-cms-artifacts/backstop
      # Set Required API Keys.
      CONNECTOR_ID: ${{ secrets.CONNECTOR_ID }}
      GMAPS_KEY: ${{ secrets.GMAPS_KEY }}
      SEARCH_UUID: ${{ secrets.SEARCH_UUID }}
      SITESTUDIO_API_KEY: ${{ secrets.SITESTUDIO_API_KEY }}
      SITESTUDIO_ORG_KEY: ${{ secrets.SITESTUDIO_ORG_KEY }}
      ACMS_JOB: ${{ matrix.acms_job }}
      JOB_TYPE: "integrated-tests"
      CI: true
    strategy:
      matrix:
        orca-job:
          - ISOLATED_TEST_ON_NEXT_MINOR
        #php-version: [ "8.1" ]
        acms_job:
          - integrated_php_unit_tests
          - integrated_existing_site_tests
          - backstop_tests
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js 12.13.1
        uses: actions/setup-node@v3
        with:
          node-version: 12.13.1
      - uses: shivammathur/setup-php@v2
        with:
          php-version: 8.1
          #coverage: xdebug
      - name: Setup MySQL
        run: |
          sudo /etc/init.d/mysql start
          mysql -uroot -proot < ./tests/ci/install.sql
      - name: Download ORCA
        run: |
          composer self-update
          composer create-project --no-dev --ignore-platform-req=php acquia/orca ../orca "$ORCA_VERSION" -n
          curl https://gist.githubusercontent.com/vishalkhode1/56497e23daa300d0634139828e98cb04/raw/b2bbe36dd58806aaca5e7da4f415a8b623fdbc88/merge_plugin.patch | git -C ../orca apply
          curl https://gist.githubusercontent.com/vishalkhode1/ef6c7ebace871612266ad61f3aab2593/raw/611dbc591e9625f292404bb73832e7ac23a2368d/alter-repository.patch | git -C ../orca apply
#      - name: Configure AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Before Install
        run: |
          # Remove internal module dependencies, so that ORCA CI doesn't report error.
          for path in $(find modules -type f -maxdepth 2 -name "composer.json" -exec ls '{}' ';'); do sed -i '/\"drupal\/acquia_cms.*\":.*\".*\"/d' $path; done;

          #if [ "${ACMS_JOB}" = "starter" ] || [ "${ACMS_JOB}" = "starter_full" ] || [ "${ACMS_JOB}" = "base" ]; then aws s3 cp --recursive ${AWS_S3_BUCKET_PATH}/artifacts/ ${ORCA_SUT_DIR}/tests/; fi

          # Remove all PHPUnit tests from individual modules, except the integrated & ExistingSite tests.
          if [ "${ACMS_JOB}" = "integrated_existing_site_tests" ]; then
            find modules/*/tests tests -type f -name "*Test.php" ! -path "*/ExistingSite*/*" -exec rm -fr '{}' ';'
          elif [ "${ACMS_JOB}" = "integrated_php_unit_tests" ]; then
            # Remove all isolated/existing_site phpunit tests from acquia_cms modules.
            find modules/*/tests -type f -name "*Test.php" -exec rm -fr '{}' ';'
            # Remove all existing_site phpunit tests from acquia_cms repo as those get's covered from integrated_existing_site_tests.
            find tests/src -type f -name "*Test.php" -path "*/ExistingSite*/*" -exec rm -fr '{}' ';'
          fi
          ../orca/bin/ci/before_install.sh
          chromedriver --disable-dev-shm-usage --disable-extensions --disable-gpu --headless --no-sandbox --port=4444 &
          CHROMEDRIVER_PID=$!
          echo "CHROMEDRIVER_PID=${CHROMEDRIVER_PID}" >> ${GITHUB_ENV}
      - name: Install
        run: ./tests/ci/install.sh
      - name: Before script
        run: ../orca/bin/ci/before_script.sh
      - name: Script
        run: ./tests/ci/script.sh
      - name: Before Cache
        run : ../orca/bin/ci/before_cache.sh
      - name: After script
        run: |
          kill -0 ${{ env.CHROMEDRIVER_PID }}
          ../orca/bin/ci/after_success.sh
          ../orca/bin/ci/after_failure.sh
          ../orca/bin/ci/after_script.sh

  isolated_tests:
    name: acquia_cms (${{ matrix.orca-job }}, ${{ matrix.modules }})
    runs-on: ubuntu-latest
    env:
      # Set ORCA related environment variables.
      ORCA_SUT_NAME: acquia/acquia_cms
      ORCA_SUT_BRANCH: develop
      ORCA_VERSION: ^3.0
      ORCA_PACKAGES_CONFIG_ALTER: ../acquia_cms/tests/packages_alter.yml
      ORCA_REPOSITORIES_ALTER: ../acquia_cms/tests/repositories_alter.yml
      ORCA_FIXTURE_PROJECT_TEMPLATE: acquia/drupal-recommended-project
      ORCA_ENABLE_NIGHTWATCH: "FALSE"
      ORCA_PHPCS_STANDARD: AcquiaPHP
      ORCA_SUT_DIR: /home/runner/work/acquia_cms/acquia_cms
      ORCA_JOB: ${{ matrix.orca-job }}

      # Set Required API Keys.
      CONNECTOR_ID: ${{ secrets.CONNECTOR_ID }}
      GMAPS_KEY: ${{ secrets.GMAPS_KEY }}
      SEARCH_UUID: ${{ secrets.SEARCH_UUID }}
      SITESTUDIO_API_KEY: ${{ secrets.SITESTUDIO_API_KEY }}
      SITESTUDIO_ORG_KEY: ${{ secrets.SITESTUDIO_ORG_KEY }}

      #Add other required environment variables.
      COMPOSER_PROCESS_TIMEOUT: 1800
      MODULES: ${{ matrix.modules }}
      JOB_TYPE: "isolated-tests"
      CI: true
    strategy:
      matrix:
        orca-job:
          - ISOLATED_TEST_ON_NEXT_MINOR
        #php-version: [ "8.1" ]
        modules:
          - acquia_cms_article, acquia_cms_person, acquia_cms_place, acquia_cms_event
          - acquia_cms_page, acquia_cms_site_studio
          - acquia_cms_image, acquia_cms_document, acquia_cms_video, acquia_cms_audio
          - acquia_cms_search, acquia_cms_common, acquia_cms_tour
#          - acquia_cms_article
#          - acquia_cms_audio
#          - acquia_cms_common
#          - acquia_cms_document
#          - acquia_cms_event
#          - acquia_cms_image
#          - acquia_cms_page
#          - acquia_cms_person
#          - acquia_cms_place
#          - acquia_cms_search
#          - acquia_cms_site_studio
#          - acquia_cms_tour
#          - acquia_cms_video
          #- acquia_cms_audio
          #- acquia_cms_headless
          #- acquia_cms_starter
          #- acquia_cms_toolbar
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js 12.13.1
        uses: actions/setup-node@v3
        with:
          node-version: 12.13.1
      - uses: shivammathur/setup-php@v2
        with:
          php-version: 8.1
          #coverage: xdebug
      - name: Download ORCA
        run: |
          composer self-update
          composer create-project --no-dev --ignore-platform-req=php acquia/orca ../orca "$ORCA_VERSION" -n
          curl https://gist.githubusercontent.com/vishalkhode1/56497e23daa300d0634139828e98cb04/raw/b2bbe36dd58806aaca5e7da4f415a8b623fdbc88/merge_plugin.patch | git -C ../orca apply
          curl https://gist.githubusercontent.com/vishalkhode1/ef6c7ebace871612266ad61f3aab2593/raw/611dbc591e9625f292404bb73832e7ac23a2368d/alter-repository.patch | git -C ../orca apply
      - name: Before Install
        run: |
          # Remove internal module dependencies, so that ORCA CI doesn't report error.
          for path in $(find modules -type f -maxdepth 2 -name "composer.json" -exec ls '{}' ';'); do sed -i '/\"drupal\/acquia_cms.*\":.*\".*\"/d' $path; done;
          # Remove all PHPUnit test files, exlcuding the current module's PHPUnit tests.
          # find modules -type f -name "*Test.php" ! -path "*/${MODULE}/*" -exec rm -fr '{}' ';'
          modules_list=$(echo ${MODULES} | tr "," "\n")
          declare -a commands
          for module in ${modules_list}
          do
            command=$(echo ${module} | xargs)
            commands=("${commands[@]}" ! -path "*/${command}/*")
          done
          find modules -type f -name "*Test.php" "${commands[@]}" -exec rm -fr '{}' ';'

          # Do not run any existing site tests. We run them seperately.
          find modules -type d -name ExistingSite | xargs rm -rf && rm -rf tests/src/
          ../orca/bin/ci/before_install.sh
          chromedriver --disable-dev-shm-usage --disable-extensions --disable-gpu --headless --no-sandbox --port=4444 &
          CHROMEDRIVER_PID=$!
          echo "CHROMEDRIVER_PID=${CHROMEDRIVER_PID}" >> ${GITHUB_ENV}
      - name: Install
        run: ./tests/ci/install.sh
      - name: Before script
        run: ../orca/bin/ci/before_script.sh
      - name: Script
        run: ./tests/ci/script.sh
      - name: Before Cache
        run: ../orca/bin/ci/before_cache.sh
      - name: After script
        run: |
          kill -0 ${{ env.CHROMEDRIVER_PID }}
          ../orca/bin/ci/after_success.sh
          ../orca/bin/ci/after_failure.sh
          ../orca/bin/ci/after_script.sh
